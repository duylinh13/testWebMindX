{"ast":null,"code":"var _jsxFileName = \"D:\\\\testMindX\\\\mindx\\\\xcareer-lv-3-test-forked (1)\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\n// Home.js\nimport React, { useState } from \"react\";\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoList from \"./TodoList\";\nimport Form from \"./Form\";\nimport Footer from \"./Footer\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [showOnlyNotFinished, setShowOnlyNotFinished] = useState(false);\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Function to add a task\n  const addTask = newTask => {\n    const updatedTasks = [...tasks, {\n      title: newTask,\n      done: false\n    }];\n    setTasks(updatedTasks);\n  };\n\n  // Function to toggle task status\n  const toggleTaskStatus = index => {\n    const updatedTasks = [...tasks];\n    updatedTasks[index].done = !updatedTasks[index].done;\n    setTasks(updatedTasks);\n  };\n\n  // Filter tasks based on showOnlyNotFinished\n  const filteredTasks = showOnlyNotFinished ? tasks.filter(task => !task.done) : tasks;\n\n  // Count the number of undone tasks\n  const undoneTasksCount = tasks.filter(task => !task.done).length;\n\n  // Handle URL parameter for showing only not finished tasks\n  React.useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    setShowOnlyNotFinished(searchParams.get(\"withDone\") === \"1\");\n  }, [location.search]);\n\n  // Update URL based on showOnlyNotFinished\n  React.useEffect(() => {\n    navigate(\"?withDone=\".concat(showOnlyNotFinished ? 1 : 0));\n  }, [showOnlyNotFinished, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(TodoListHeader, {\n        undoneTasksCount: undoneTasksCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        addTask: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        tasks: filteredTasks,\n        toggleTaskStatus: toggleTaskStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"c+G2zUrpyvLA+edC0e+/bfgxiF4=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","TodoListHeader","TodoList","Form","Footer","useLocation","useNavigate","jsxDEV","_jsxDEV","Home","_s","tasks","setTasks","showOnlyNotFinished","setShowOnlyNotFinished","location","navigate","addTask","newTask","updatedTasks","title","done","toggleTaskStatus","index","filteredTasks","filter","task","undoneTasksCount","length","useEffect","searchParams","URLSearchParams","search","get","concat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/testMindX/mindx/xcareer-lv-3-test-forked (1)/src/Home.js"],"sourcesContent":["// Home.js\r\nimport React, { useState } from \"react\";\r\nimport TodoListHeader from \"./TodoListHeader\";\r\nimport TodoList from \"./TodoList\";\r\nimport Form from \"./Form\";\r\nimport Footer from \"./Footer\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [showOnlyNotFinished, setShowOnlyNotFinished] = useState(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  // Function to add a task\r\n  const addTask = (newTask) => {\r\n    const updatedTasks = [...tasks, { title: newTask, done: false }];\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Function to toggle task status\r\n  const toggleTaskStatus = (index) => {\r\n    const updatedTasks = [...tasks];\r\n    updatedTasks[index].done = !updatedTasks[index].done;\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Filter tasks based on showOnlyNotFinished\r\n  const filteredTasks = showOnlyNotFinished\r\n    ? tasks.filter((task) => !task.done)\r\n    : tasks;\r\n\r\n  // Count the number of undone tasks\r\n  const undoneTasksCount = tasks.filter((task) => !task.done).length;\r\n\r\n  // Handle URL parameter for showing only not finished tasks\r\n  React.useEffect(() => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    setShowOnlyNotFinished(searchParams.get(\"withDone\") === \"1\");\r\n  }, [location.search]);\r\n\r\n  // Update URL based on showOnlyNotFinished\r\n  React.useEffect(() => {\r\n    navigate(`?withDone=${showOnlyNotFinished ? 1 : 0}`);\r\n  }, [showOnlyNotFinished, navigate]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <TodoListHeader undoneTasksCount={undoneTasksCount} />\r\n        <Form addTask={addTask} />\r\n        <TodoList tasks={filteredTasks} toggleTaskStatus={toggleTaskStatus} />\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}